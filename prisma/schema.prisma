// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       Int     @id @default(autoincrement())
  phone    String?
  intro    String?
  bio      String?
  country  String?
  language String?
  company  String?
  jobTitle String?
  website  String?
  gender   Gender
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  //isPublic Boolean @default(false)
}

/**
 * model UserSettings {
 * timezone String?
 * distance String?
 * dateFormat String?
 * }
 */

model User {
  id            String     @id @default(cuid())
  firstName     String
  lastName      String
  userName      String?
  email         String?    @unique
  emailVerified Boolean    @default(false)
  dateOfBirth   DateTime?
  password      String
  image         String?
  role          String
  status        UserStatus
  registeredAt  DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime? // soft delete
  lastLogin     DateTime   @default(now())
  profile       Profile?

  sessions            Session[]
  events              Event[]
  attendees           Attendee[]
  oauthTokens         OAuthToken[]
  activities          Activity[]
  activityFeeds       ActivityFeed[]
  registrations       Registration[]
  runResults          RunResult[]
  resetTokens         ResetToken[]
  assignedTasks       Task[]               @relation("taskAssignee")
  createdTasks        Task[]               @relation("taskCreatedBy")
  taskAttachments     TaskAttachment[]
  projects            Project[]
  taskComments        TaskComment[]
  accounts            Account[]
  address             Address?
  followerUsers       Follows[]            @relation("follower")
  followedUsers       Follows[]            @relation("followed")
  posts               Post[]
  comments            Comment[]
  likes               Like[]
  feedPosts           FeedPost[]
  feedComments        FeedComment[]
  feedLikes           FeedLike[]
  conversationMembers ConversationMember[]
  messages            Message[]
  user1Friends        UserFriend[]         @relation("user1")
  user2Friends        UserFriend[]         @relation("user2")
  actionUsers         UserFriend[]         @relation("actionUser")
  //groups          Group[]
  //userGroups      UserGroup[]
  eventAttachments    EventAttachment[]
  activityAttachments ActivityAttachment[]
  media               Media[]
  mediaComments       MediaComment[]
  galleries           Gallery[]
}

model CustomField {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String?
  constrained       Boolean             @default(false)
  formInput         String              @default("text")
  dataType          DataType
  minValue          Int?
  maxValue          Int?
  options           CustomFieldOption[]
  values            CustomFieldValue[]
  entities          CustomFieldEntity[]
}

model CustomFieldEntity {
  id            Int         @id @default(autoincrement())
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  customFieldId Int
  entityType    String
}

enum DataType {
  STRING
  NUMBER
  TEXT
  BOOLEAN
  DATE
}

model CustomFieldOption {
  id            Int         @id @default(autoincrement())
  value         String
  caption       String
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  customFieldId Int
}

model CustomFieldValue {
  id            Int         @id @default(autoincrement())
  stringValue   String?
  textValue     String?     @db.Text
  numberValue   Int?
  dateValue     DateTime?
  booleanValue  Boolean?
  entityType    String
  entityId      Int?
  entityStrId   String?
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  customFieldId Int
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  state   String
  zipCode String
  country String
  type    String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
}

model OAuthToken {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  accessToken  String?
  refreshToken String?
  provider     String?
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String     @db.Text
  summary     String?    @db.Text
  cover       String?    @db.Text
  slug        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      PostStatus @default(DRAFT)
  //published       Boolean   @default(false)
  publishedAt DateTime?
  metaTitle   String?
  //metaDescription String?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  tags        Tag[]
  comments    Comment[]
  likes       Like[]
  views       PostViews?
}

model PostViews {
  id     Int  @id @default(autoincrement())
  views  Int  @default(0)
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @unique
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Comment {
  id          Int           @id @default(autoincrement())
  comment     String        @db.Text
  status      CommentStatus @default(PENDING)
  publishedAt DateTime      @default(now())
  editedAt    DateTime?
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  post        Post?         @relation(fields: [postId], references: [id])
  postId      Int?
  parent      Comment?      @relation("parent", fields: [parentId], references: [id])
  parentId    Int?
  comments    Comment[]     @relation("parent")
  likes       Like[]
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Tag {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  slug        String?
  posts       Post[]
}

model Category {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  slug        String?
  posts       Post[]
}

model FeedPost {
  id          Int           @id @default(autoincrement())
  content     String?       @db.Text
  contentType String        @default("text")
  createdAt   DateTime      @default(now())
  mediaUrl    String?
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  comments    FeedComment[]
  likes       FeedLike[]
}

model FeedComment {
  id          Int           @id @default(autoincrement())
  comment     String        @db.Text
  status      CommentStatus @default(PENDING)
  publishedAt DateTime      @default(now())
  editedAt    DateTime?
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  post        FeedPost?     @relation(fields: [postId], references: [id])
  postId      Int?
  parent      FeedComment?  @relation("parent", fields: [parentId], references: [id])
  parentId    Int?
  comments    FeedComment[] @relation("parent")
  likes       FeedLike[]
}

model FeedLike {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  post      FeedPost?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   FeedComment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  status      String?
  startDate   DateTime
  endDate     DateTime
  cost        Int
  manager     User     @relation(fields: [managerId], references: [id])
  managerId   String
  tasks       Task[]
}

model TaskComment {
  id        Int      @id @default(autoincrement())
  comment   String   @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
}

model Media {
  id          Int            @id @default(autoincrement())
  name        String
  description String         @db.Text
  file        String         @db.Text
  size        Int
  orientation Orientation?
  likes       Int            @default(0)
  views       Int            @default(0)
  downloads   Int            @default(0)
  createdAt   DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  category    MediaCategory  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  mediaType   MediaType      @relation(fields: [mediaTypeId], references: [id])
  mediaTypeId Int
  gallery     Gallery        @relation(fields: [galleryId], references: [id])
  galleryId   Int
  comments    MediaComment[]
}

model Gallery {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  views       Int      @default(0)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  event       Event?   @relation(fields: [eventId], references: [id])
  eventId     Int?
  media       Media[]
}

model MediaComment {
  id          Int           @id @default(autoincrement())
  comment     String        @db.Text
  status      CommentStatus @default(PENDING)
  publishedAt DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  media       Media?        @relation(fields: [mediaId], references: [id])
  mediaId     Int?
}

model MediaType {
  id    Int     @id @default(autoincrement())
  name  String
  slug  String
  media Media[]
}

model MediaCategory {
  id      Int     @id @default(autoincrement())
  name    String
  details String? @db.Text
  media   Media[]
}

model Task {
  id           Int              @id @default(autoincrement())
  title        String
  description  String?
  priority     String?
  type         String?
  status       TaskStatus
  order        Int
  dueDate      DateTime
  project      Project          @relation(fields: [projectId], references: [id])
  projectId    Int
  createdAt    DateTime         @default(now())
  createdBy    User             @relation("taskCreatedBy", fields: [createdById], references: [id])
  createdById  String
  updatedAt    DateTime         @updatedAt
  assignee     User[]           @relation("taskAssignee")
  attachments  TaskAttachment[]
  taskComments TaskComment[]
  labels       TaskLabel[]
}

model TaskLabel {
  id    Int    @id @default(autoincrement())
  title String
  tasks Task[]
}

model TaskAttachment {
  id           Int    @id @default(autoincrement())
  fileName     String
  fileUrl      String
  task         Task   @relation(fields: [taskId], references: [id])
  taskId       Int
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

model Event {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?           @db.Text
  color          String?
  status         String?
  location       String?
  contact        String?
  maxAttendees   Int?
  onlineLink     String?
  eventUrl       String?
  startDate      DateTime
  endDate        DateTime
  allDay         Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdBy      User              @relation(fields: [createdById], references: [id])
  createdById    String
  venue          Venue?            @relation(fields: [venueId], references: [id])
  venueId        Int?
  eventSchedules EventSchedule[]
  attendees      Attendee[]
  organizer      Organizer?        @relation(fields: [organizerId], references: [id])
  organizerId    Int?
  eventType      EventType         @relation(fields: [eventTypeId], references: [id])
  eventTypeId    Int
  runs           Run[]
  attachments    EventAttachment[]
  galleries      Gallery[]
}

model EventType {
  id    Int     @id @default(autoincrement())
  type  String
  event Event[]
}

model EventAttachment {
  id           Int     @id @default(autoincrement())
  fileName     String
  fileTitle    String?
  fileType     String
  fileUrl      String
  event        Event   @relation(fields: [eventId], references: [id])
  eventId      Int
  uploadedBy   User    @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

model Organizer {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[]
}

model Venue {
  id       Int     @id @default(autoincrement())
  location String
  events   Event[]
}

model Attendee {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  event   Event   @relation(fields: [eventId], references: [id])
  eventId Int
  status  String?
}

model EventSchedule {
  id        Int      @id @default(autoincrement())
  activity  String
  location  String?
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
}

model Run {
  id            Int            @id @default(autoincrement())
  title         String
  distance      Int
  price         Int
  elevation     Int?
  surface       String?
  tshirt        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  event         Event          @relation(fields: [eventId], references: [id])
  eventId       Int
  registrations Registration[]
  runResults    RunResult[]
  runCategories RunCategory[]
}

model RunCategory {
  id       Int    @id @default(autoincrement())
  category String
  title    String
  runs     Run[]
}

model Registration {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  firstName   String
  lastName    String
  gender      Gender
  dateOfBirth DateTime
  email       String
  nation      String
  city        String
  club        String?
  phone       String?
  presented   Boolean     @default(false)
  paid        Boolean     @default(false)
  tshirtSize  TshirtSize?
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  run         Run         @relation(fields: [runId], references: [id])
  runId       Int
}

model RunResult {
  id          Int     @id @default(autoincrement())
  rank        Int
  bib         Int
  name        String
  category    String
  gender      Gender
  yearOfBirth Int
  club        String
  time        Int
  user        User?   @relation(fields: [userId], references: [id])
  userId      String?
  run         Run     @relation(fields: [runId], references: [id])
  runId       Int
}

model Account {
  id                    String   @id @default(cuid())
  userId                String   @unique
  //type                     String
  provider              String
  providerAccountId     String
  refreshToken          String?  @db.Text
  accessToken           String?  @db.Text
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String?  @db.Text
  sessionState          String?
  refreshTokenExpiresAt Int?
  user                  User?    @relation(fields: [userId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

/**
 * model VerificationToken {
 * identifier String
 * token      String
 * expires    DateTime
 * @@unique([identifier, token])
 * }
 */

enum Orientation {
  VERTICAL
  HORIZONTAL
  SQUARE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum TshirtSize {
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  MALE
  FEMALE
}

enum FriendStatus {
  PENDING
  APPROVED
  DECLINED
  BLOCKED
}

model UserFriend {
  id           Int          @id @default(autoincrement())
  user1        User         @relation("user1", fields: [userId1], references: [id])
  userId1      String
  user2        User         @relation("user2", fields: [userId2], references: [id])
  userId2      String
  actionUser   User         @relation("actionUser", fields: [actionUserId], references: [id])
  actionUserId String // id of the user who made last status update
  status       FriendStatus
  createdAt    DateTime     @default(now())
}

model Conversation {
  id                  Int                  @id @default(autoincrement())
  name                String?
  isGroup             Boolean
  lastMessage         Message?             @relation("lastMessage", fields: [lastMessageId], references: [id])
  lastMessageId       Int?
  conversationMembers ConversationMember[]
  messages            Message[]
}

model ConversationMember {
  id                Int          @id @default(autoincrement())
  user              User         @relation(fields: [userId], references: [id])
  userId            String
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  conversationId    Int
  lastSeenMessage   Message?     @relation(fields: [lastSeenMessageId], references: [id])
  lastSeenMessageId Int?
}

model Message {
  id                  Int                  @id @default(autoincrement())
  sender              User                 @relation(fields: [senderId], references: [id])
  senderId            String
  conversation        Conversation         @relation(fields: [conversationId], references: [id])
  conversationId      Int
  content             String               @db.Text
  type                String
  createdAt           DateTime             @default(now())
  conversationMembers ConversationMember[]
  lastConversations   Conversation[]       @relation("lastMessage")
}

model Follows {
  id         Int      @id @default(autoincrement())
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId String
  followed   User     @relation("followed", fields: [followedId], references: [id])
  followedId String
  followedAt DateTime @default(now())
}

model Activity {
  id           Int                  @id @default(autoincrement())
  user         User                 @relation(fields: [userId], references: [id])
  userId       String
  name         String
  type         String
  createdAt    DateTime             @default(now())
  date         DateTime
  duration     Int
  distance     Int
  elevation    Int
  avgSpeed     Int
  avgPace      Int
  calories     Int?
  activityData ActivityData[]
  attachments  ActivityAttachment[]
}

model ActivityData {
  id         Int      @id @default(autoincrement())
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int
  lat        Float
  lng        Float
  time       DateTime
  elevation  Float
}

model ActivityAttachment {
  id           Int      @id @default(autoincrement())
  fileName     String
  fileTitle    String?
  fileType     String
  fileUrl      String
  activity     Activity @relation(fields: [activityId], references: [id])
  activityId   Int
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

model ActivityFeed {
  id         Int      @id @default(autoincrement())
  actor      User     @relation(fields: [actorId], references: [id])
  actorId    String
  verb       String
  objectType String
  objectId   Int
  targetType String?
  targetId   Int?
  time       DateTime
}
