https://stackoverflow.com/questions/34546272/cannot-find-module-bcrypt

//import { getFeed } from "@/actions/feed";
//import { getFeedData } from "@/utils/feed";

/*const feed = await getFeed();
  console.log(feed);
  const data = getFeedData(feed);*/
{/*data.map((message, index) => {
        return (
          <div dangerouslySetInnerHTML={{ __html: message }} key={index}></div>
        );
      })*/}
      
      {/*<button onClick={() => cropImageNow(file)}>Crop</button>*/}
              {/*<img
                src={URL.createObjectURL(file)}
                width={"100%"}
              />*/}

              {/*<ReactCrop crop={crop} onChange={setCrop}>
                <img src={URL.createObjectURL(file)} />
              </ReactCrop>*/}
              
{/*<FormMultiSelect
              label={field.label}
              name={name}
              errors={errors}
              value={value}
              onChange={onChange}
              textField={field.textField!}
              options={field.options! as MultiSelectOption[]}
              //ref={ref}
            />*/}


            export type State =
  | {
    status: "success";
    message: string;
    redirect?: string;    
  }
  | {
    status: "error";
    message: string;
    errors?: Array<{
      path: string;
      message: string;
    }>;
  }
  | null;

export async function submitForm(
  fields: FormField[],
  formSchema: FormSchema,
  action: (...args : any[]) => any,
  actionParams: any,
  prevState: State | null,
  formData: FormData,
): Promise<State> {
  let response;
  try {
    const data: { [key: string]: any } = {};
    fields.forEach((field) => {      
        data[field.name] = field.type === 'm2m' ? formData.getAll(field.name) : formData.get(field.name);      
    });
    const validation = rules[formSchema];
    const parsedData = validation ? validation.parse(data) : data;

    response = await action(...actionParams, parsedData);
  } catch (e) {
    console.log('An error occured saving form data:', e);

    if (e instanceof ZodError) {
      return parseValidationError(e);
    }
    return {
      status: "error",
      message: "Something went wrong. Please try again.",
    };
  }

  if (response) {
    return {
      status: "success",
      message: "Done.",
      redirect: response.redirect      
    };
  }

  return {
    status: "success",
    message: "Done.",
  };
}

function haversine_distance(mk1: any, mk2: any) {
    var R = 3958.8; // Radius of the Earth in miles
    var rlat1 = mk1.lat * (Math.PI/180); // Convert degrees to radians
    var rlat2 = mk2.lat * (Math.PI/180); // Convert degrees to radians
    var difflat = rlat2-rlat1; // Radian difference (latitudes)
    var difflon = (mk2.lng-mk1.lng) * (Math.PI/180); // Radian difference (longitudes)

    var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat/2)*Math.sin(difflat/2)+Math.cos(rlat1)*Math.cos(rlat2)*Math.sin(difflon/2)*Math.sin(difflon/2)));
    return d;
  }

  var getDistance = function(p1: any, p2: any) {
    var R = 6378137; // Earthâ€™s mean radius in meter
    var dLat = rad(p2.lat - p1.lat);
    var dLong = rad(p2.lng - p1.lng);
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(rad(p1.lat)) * Math.cos(rad(p2.lat)) *
      Math.sin(dLong / 2) * Math.sin(dLong / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    return d; // returns the distance in meter
  };

  /*const formObject = Object.fromEntries(formData.entries());
    const reader = new FileReader();
    reader.onload = function (e: any) {
      const content = e.target.result;            
    };
    reader.readAsText(formObject['myFile'] as Blob);*/

    const imap = new Imap({
  user: process.env.EMAIL_USER,
  password: process.env.EMAIL_PASS,
  host: "imap.gmail.com",
  port: 993,
  tls: true,
  tlsOptions: { rejectUnauthorized: false },
});

/*const client = new ImapFlow({
  host: "imap.gmail.com",
  port: 993,
  secure: true,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS+' ',
  },
});*/

export async function fetchEmails() {
  //return [];
  await client.connect();

  // Select and lock a mailbox. Throws if mailbox does not exist
  let lock = await client.getMailboxLock("INBOX");
  try {
    let tree = await client.listTree();
    //let message = await client.fetchOne(client.mailbox.exists, { source: true });
    //console.log(message.source.toString());

    // list subjects for all messages
    // uid value is always included in FETCH response, envelope strings are in unicode.
    for await (let message of client.fetch("1:*", { envelope: true })) {
      //console.log(`${message.uid}: ${message.envelope.subject}`);
    }
  } finally {
    // Make sure lock is released, otherwise next `getMailboxLock()` never returns
    lock.release();
  }

  // log out and close connection
  await client.logout();
}

export async function fetchEmails2() {
  await client.connect();
  const lock = await client.getMailboxLock("INBOX");
  try {
    for await (const message of client.fetch("1:*", {
      envelope: true,
      bodyParts: true,
      bodyStructure: true,
    })) {
      const { content } = await client.download(message.uid, ["TEXT"]);
      //console.log("Email Content:", content.toString());
      return(content.toString());
    }
  } catch(e) {
    console.log('error occured');
    console.log(e);
  } finally {
    lock.release();
    if (client) {
        await client.logout();
    }    
  }
}

export async function getEmails() {
  console.log("get emails:");
  const body: any[] = [];
  imap.once("ready", () => {
    imap.openBox("INBOX", false, () => {
      imap.search(
        ["UNSEEN", ["SINCE", new Date()]],
        (err: any, results: any) => {
          const f = imap.fetch(results, { bodies: "" });
          f.on("message", (msg: any) => {
            msg.on("body", (stream: any) => {
              simpleParser(stream, async (err: any, parsed: any) => {
                console.log(parsed);
                body.push({ body: parsed });
              });
            });
            msg.once("attributes", (attrs: any) => {
              const { uid } = attrs;
              imap.addFlags(uid, ["\\Seen"], () => {
                console.log("Marked as read!");
              });
            });
          });
          f.once("error", (ex: any) => {
            return Promise.reject(ex);
          });
          f.once("end", () => {
            console.log("Done fetching all messages!");
            imap.end();
            return Promise.resolve(body);
          });
        }
      );
    });
  });
}

export async function getUnreadMails() {
  imap.once("ready", function () {
    imap.openBox("INBOX", true, function (err: any, box: any) {
      if (err) throw err;

      const searchCriteria = [
        ["FROM", "Discord"],
        //["HEADER", "SUBJECT", SUBJECT],
        ["UNSEEN", ["SINCE", "Day, Year"]],
      ];
      const fetchOptions = { bodies: ["HEADER", "TEXT"], markSeen: true };

      imap.search(searchCriteria, function (err: any, results: any) {
        if (err) throw err;

        const mailStream = imap.fetch(results, fetchOptions);

        mailStream.on("message", function (message: any) {
          message.on("body", function (stream: any, info: any) {
            simpleParser(stream, (err: any, mail: any) => {
              console.log("Subject:", mail.subject);
              //console.log("Body:", mail.text);
            });
          });
        });

        mailStream.once("end", function () {
          imap.end();
        });
      });
    });
  });

  imap.connect();
  return [];
}

//q = await prisma.event.findFirst({ where: { id: r.objectId }});
      //message = `${r.actor.firstName} ${r.actor.lastName} ${r.verb} ${q?.name} ${r.objectType}`;


      /**
 * model Contact {
 * id             Int          @id @default(autoincrement())
 * user1          User         @relation("user1", fields: [user1Id], references: [id])
 * user1Id        String
 * user2          User         @relation("user2", fields: [user2Id], references: [id])
 * user2Id        String
 * createdAt DateTime @default(now())
 * //conversation   Conversation @relation(fields: [conversationId], references: [id])
 * //conversationId Int
 * }
 * /**
 * model Group {
 * id          Int         @id @default(autoincrement())
 * name        String
 * description String
 * users       User[]
 * userGroup   UserGroup[]
 * }
 * model UserGroup {
 * id          Int      @id @default(autoincrement())
 * user        User     @relation(fields: [userId], references: [id])
 * userId      String
 * group       Group    @relation(fields: [groupId], references: [id])
 * groupId     Int
 * joinedAt    DateTime @default(now())
 * leftGroupAt DateTime @default(now())
 * role        String
 * status      String
 * }
 * model GroupPost {
 * id        Int      @id @default(autoincrement())
 * content   String   @db.Text
 * createdAt DateTime @default(now())
 * mediaType String
 * mediaUrl  String
 * user      User     @relation(fields: [userId], references: [id])
 * userId    String
 * group     User     @relation(fields: [groupId], references: [id])
 * groupId   String
 * }
 */

/**
 * model FriendRequest {
 * id         Int    @id @default(autoincrement())
 * sender     User   @relation("sender", fields: [senderId], references: [id])
 * senderId   String
 * receiver   User   @relation("receiver", fields: [receiverId], references: [id])
 * receiverId String
 * }
 */

 /**
 * model Device {
 * id     Int    @id @default(autoincrement())
 * user   User   @relation(fields: [userId], references: [id])
 * userId String
 * name   String
 * }
 */

 export async function uploadFile(formData: FormData, uploadDir = null) {
  const dir = uploadDir ?? "public/assets/";

  const file = formData.get("file") as File;
  if (!file) {
    throw new Error("An error occured");
  }

  const buffer = Buffer.from(await file.arrayBuffer());
  const filename = file.name.replaceAll(" ", "_");

  try {
    await writeFile(path.join(process.cwd(), dir + filename), buffer);
  } catch (error) {
    console.log("Error occured ", error);
    throw error;
  }
}

export async function uploadFiles(formData: FormData, uploadDir = null) {
  const count = formData.get("count");
  const dir = uploadDir ?? "public/assets/";

  for (let i = 0; i < Number(count); i++) {
    const file = formData.get("file-" + i) as File;
    if (!file) {
      throw new Error("An error occured");
    }

    const buffer = Buffer.from(await file.arrayBuffer());
    const filename = file.name.replaceAll(" ", "_");

    try {
      await writeFile(path.join(process.cwd(), dir + filename), buffer);
    } catch (error) {
      console.log("Error occured ", error);
      throw error;
    }
  }
}

async function onDownloadCropClick() {
    const image = imgRef.current
    const previewCanvas = previewCanvasRef.current
    if (!image || !previewCanvas || !completedCrop) {
      throw new Error('Crop canvas does not exist')
    }

    // This will size relative to the uploaded image
    // size. If you want to size according to what they
    // are looking at on screen, remove scaleX + scaleY
    const scaleX = image.naturalWidth / image.width
    const scaleY = image.naturalHeight / image.height

    const offscreen = new OffscreenCanvas(
      completedCrop.width * scaleX,
      completedCrop.height * scaleY,
    )
    const ctx = offscreen.getContext('2d')
    if (!ctx) {
      throw new Error('No 2d context')
    }

    ctx.drawImage(
      previewCanvas,
      0,
      0,
      previewCanvas.width,
      previewCanvas.height,
      0,
      0,
      offscreen.width,
      offscreen.height,
    )
    // You might want { type: "image/jpeg", quality: <0 to 1> } to
    // reduce image size
    const blob = await offscreen.convertToBlob({
      type: 'image/png',
    })

    /*if (blobUrlRef.current) {
      URL.revokeObjectURL(blobUrlRef.current)
    }
    blobUrlRef.current = URL.createObjectURL(blob)

    if (hiddenAnchorRef.current) {
      hiddenAnchorRef.current.href = blobUrlRef.current
      hiddenAnchorRef.current.click()
    }*/
  }

  {/*<ReactCrop
                crop={crop}
                onChange={(_, percentCrop) => setCrop(percentCrop)}
                onComplete={(c) => setCompletedCrop(c)}
                aspect={16 / 9}
                // minWidth={400}
                minHeight={100}
                // circularCrop
              >
                <img
                  ref={imgRef}
                  alt="Crop me"
                  src={imgSrc}
                  onLoad={onImageLoad}
                />
              </ReactCrop>*/}
          
              {/*completedCrop && (
                <>
                  <div>
                  { completedCrop.width }
                    <canvas
                      ref={previewCanvasRef}
                      style={{
                        border: "1px solid black",
                        objectFit: "contain",
                        width: completedCrop.width,
                        height: completedCrop.height,
                      }}
                    />
                  </div>
                </>
              )*/}

              /*if (event.target.files && event.target.files.length > 0) {
      setCrop(undefined);
      const reader = new FileReader()
      reader.addEventListener('load', () => {
        setFile(uploadedFile);
        setImgSrc(reader.result?.toString() || '');
      });
      reader.readAsDataURL(event.target.files[0]);
    }*/

    useDebounce(
    async () => {
      if (
        completedCrop?.width &&
        completedCrop?.height &&
        imgRef.current &&
        previewCanvasRef.current
      ) {
        // We use canvasPreview as it's much faster than imgPreview.
        canvasPreview(
          imgRef.current,
          previewCanvasRef.current,
          completedCrop,
          //scale,
          //rotate,
        )
      }
    },
    100,
    [completedCrop/*, scale, rotate*/],

    const [imgSrc, setImgSrc] = useState("");
  const [output, setOutput] = useState("");
  const [completedCrop, setCompletedCrop] = useState<PixelCrop>();
  const [crop, setCrop] = useState<Crop>();
  const previewCanvasRef = useRef<HTMLCanvasElement>(null);

  function centerAspectCrop(
  mediaWidth: number,
  mediaHeight: number,
  aspect: number
) {
  return centerCrop(
    makeAspectCrop(
      {
        unit: "%",
        width: 90,
      },
      aspect,
      mediaWidth,
      mediaHeight
    ),
    mediaWidth,
    mediaHeight
  );
}

const onImageLoad = (e: React.SyntheticEvent<HTMLImageElement>) => {
    const { width, height } = e.currentTarget;
    setCrop(centerAspectCrop(width, height, 16 / 9));
  };