// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String? // new column
  status        String? // new column
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  posts                  Post[]
  profile                Profile?
  tasks                  Task[]
  events                 Event[]
  attendees              Attendee[]
  user1contacts          Contact[]            @relation("user1")
  user2contacts          Contact[]            @relation("user2")
  conversationMembers    ConversationMember[]
  messages               Message[]
  friendRequestSenders   FriendRequest[]      @relation("sender")
  friendRequestReceivers FriendRequest[]      @relation("receiver")
  oauthTokens            OAuthToken[]
}

model OAuthToken {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  accessToken  String?
  refreshToken String?
  provider     String?
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  content    String?
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  categories Category[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      Status
  order       Int
  deadline    DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Event {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  color          String?
  status         String?
  maxAttendees   Int?
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      User            @relation(fields: [createdById], references: [id])
  createdById    String
  venue          Venue           @relation(fields: [venueId], references: [id])
  venueId        Int
  eventSchedules EventSchedule[]
  attendees      Attendee[]
}

model Venue {
  id       Int     @id @default(autoincrement())
  locality String?
  events   Event[]
}

model Attendee {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  event    Event   @relation(fields: [eventId], references: [id])
  eventId  Int
  status   String?
  attended Boolean
}

model EventSchedule {
  id        Int      @id @default(autoincrement())
  activity  String
  location  String?
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

model Contact {
  id             Int          @id @default(autoincrement())
  user1          User         @relation("user1", fields: [user1Id], references: [id])
  user1Id        String
  user2          User         @relation("user2", fields: [user2Id], references: [id])
  user2Id        String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
}

model Conversation {
  id                  Int                  @id @default(autoincrement())
  name                String?
  isGroup             Boolean
  lastMessage         Message?             @relation("lastMessage", fields: [lastMessageId], references: [id])
  lastMessageId       Int?
  contacts            Contact[]
  conversationMembers ConversationMember[]
  messages            Message[]
}

model ConversationMember {
  id                Int          @id @default(autoincrement())
  user              User         @relation(fields: [userId], references: [id])
  userId            String
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  conversationId    Int
  lastSeenMessage   Message?     @relation(fields: [lastSeenMessageId], references: [id])
  lastSeenMessageId Int?
}

model Message {
  id                  Int                  @id @default(autoincrement())
  sender              User                 @relation(fields: [senderId], references: [id])
  senderId            String
  conversation        Conversation         @relation(fields: [conversationId], references: [id])
  conversationId      Int
  content             String
  type                String
  createdAt           DateTime             @default(now())
  conversationMembers ConversationMember[]
  lastConversations   Conversation[]       @relation("lastMessage")
}

model FriendRequest {
  id         Int    @id @default(autoincrement())
  sender     User   @relation("sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
}
